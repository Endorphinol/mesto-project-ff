{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// Функция создания карточки.\nexport function createCard(card, deleteCard, addLike, userId, openPopupImage) {\n    const templateList = document.querySelector('#card-template').content;\n    const templateCard = templateList.querySelector('.card').cloneNode(true);\n    const likeButton = templateCard.querySelector('.card__like-button');\n    const image = templateCard.querySelector('.card__image');\n    const likeCount = templateCard.querySelector('.card__count');\n    likeCount.textContent = card.likes ? card.likes.length : 0;\n    templateCard.querySelector('.card__title').textContent = card.name;\n    const isLiked = likeButton.classList.contains('card__like-button_is-active');\n    templateCard.querySelector('.card__like-button').addEventListener('click', () => addLike(card._id, isLiked)\n        .then((data) => {\n            likeCount.textContent = data.likes.length;\n            likeButton.classList.toggle('card__like-button_is-active');\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n    );\n\n    // Проверка идентификатора пользователя с остальными пользователями.\n    if (userId !== card.owner._id) {\n        templateCard.querySelector('.card__delete-button').classList.remove('card__delete-button');\n    } else {\n        templateCard.querySelector('.card__delete-button').addEventListener('click', () => deleteCard(card._id)\n            .then(() => {\n                templateCard.remove();\n            })\n            .catch((error) => {\n                console.log('Ошибка', error);\n            })\n        )\n    };\n\n    // Открытие попапа крупного изображения.\n    image.addEventListener('click', function () {\n        openPopupImage(card.link, card.name)\n    });\n    // Создание мелких карточек на сайте.\n    image.src = card.link;\n    image.alt = card.name;\n    return templateCard;\n};","// Открыть модальное окно.\nexport function openModal(currentModal) {\n    currentModal.classList.add('popup_is-opened');\n    document.addEventListener('keydown', closeModalEscape);\n};\n// Закрыть модальное окно.\nexport function closeModal(currentModal) {\n    currentModal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEscape);\n\n};\n// Закрыть модальное окно по оверлею.\nexport function closeModalOverlay(evt) {\n    const currentModal = document.querySelector('.popup_is-opened');\n    if (evt.target === currentModal) {\n        closeModal(currentModal);\n    }\n};\n// Закрыть модальное окно по Escape.\nexport function closeModalEscape(evt) {\n    if (evt.key === 'Escape') {\n        const currentModal = document.querySelector('.popup_is-opened');\n        if (currentModal) {\n            closeModal(currentModal);\n        }\n    }\n};\n\n","// Проверка валидации.\nexport const isValid = (formElement, inputElement, configValidation) => {\n    if (inputElement.validity.patternMismatch) {\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n    } else {\n        inputElement.setCustomValidity(\"\");\n    }\n    if (!inputElement.validity.valid) {\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\n    } else {\n        hideInputError(formElement, inputElement, configValidation);\n    }\n};\n\n// Функция отображения ошибок валидации.\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(configValidation.errorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(configValidation.inputErrorClass);\n};\n\n// Функция скрытия ошибок валидации.\nexport const hideInputError = (formElement, inputElement, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(configValidation.errorClass);\n    errorElement.textContent = '';\n    errorElement.classList.remove(configValidation.inputErrorClass);\n};\n\n// Функция отключения кнопки.\nconst disableSubmitButton = (button, config) => {\n    button.disabled = true;\n    button.classList.add(config.inactiveButtonClass);\n};\n\n// Функция включения кнопок.\nconst enableSubmitButton = (button, config) => {\n    button.disabled = false;\n    button.classList.remove(config.inactiveButtonClass);\n};\n\n// Проверка на не валидность хотя бы одного поля ввода.\nexport const hasInvalidInput = (inputList) => {\n    return inputList.some((inputElement) => {\n        return !inputElement.validity.valid;\n    })\n};\n\n// Проверка на включение и выключение кнопки.\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\n    if (hasInvalidInput(inputList)) {\n        disableSubmitButton(buttonElement, configValidation);\n    } else {\n        enableSubmitButton(buttonElement, configValidation);\n    }\n};\n\n// Поиск всех полей ввода и кнопки обход всех полей ввода и добавление слушателей.\nexport const setEventListeners = (formElement, configValidation) => {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n    toggleButtonState(inputList, buttonElement, configValidation);\n    inputList.forEach((inputElement) => {\n        inputElement.addEventListener('input', () => {\n            isValid(formElement, inputElement, configValidation);\n            toggleButtonState(inputList, buttonElement, configValidation);\n        });\n    });\n};\n\n// Поиск всех форм на странице и передача их функции слушателю полей.\nexport const enableValidation = (configValidation) => {\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector));\n    formList.forEach((formElement) => {\n        setEventListeners(formElement, configValidation);\n    });\n};\n\n// Функция очистки полей валидации.\nexport function clearValidation(formElement, configValidation) {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n\n    inputList.forEach((inputElement) => {\n        hideInputError(formElement, inputElement, configValidation);\n    });\n\n    disableSubmitButton(buttonElement, configValidation);\n};","// Конфигурация для подставки идентификатора и токена.\nexport const config = {\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-35',\n    headers: {\n        authorization: '08a2006d-1e8e-4054-8f6b-d1d1b6dfc2ea',\n        'Content-Type': 'application/json'\n    }\n};\n\n// Функция для проверки обьекта ответа.\nexport const handleResponse = (response) => {\n    if (response.ok) {\n        return response.json();\n    }\n    return Promise.reject(`Ошибка: ${response.status}`);\n};\n\n// Проверка фотографии для подтверждения.\nexport const updatePhotoCheck = (url) => {\n    return fetch(`${url.value}`, {\n        method: 'HEAD',\n    })\n        .then(response => {\n            if (!response.ok) {\n                console.log('Произошла ошибка');\n            }\n            const contentType = response.headers.get('Content-Type');\n            if (!contentType.startsWith('image/')) {\n                console.log('URL не является картинкой');\n            }\n        })\n};\n\n// Обновление фотографии пользователя на сайте.\nexport const updatePhoto = (newAvatarPhoto) => {\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            avatar: `${newAvatarPhoto.value}`\n        })\n    })\n        .then(handleResponse)\n};\n\n// Редактирование имени и деятельности пользователя в профиле.\nexport const updateProfile = (nameData, aboutData,) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameData,\n            about: aboutData,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Добавление карточки на сайт.\nexport const addCard = (nameCard, linkCard) => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'POST',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameCard,\n            link: linkCard,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Загрузка информации о пользователе с сервера.\nexport const getUserData = () => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Загрузка карточек с сервера.\nexport const getInitialCards = () => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Удаление карточки по нажатию.\nexport const deleteCard = (cardId) => {\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Функция добавления лайка на к арточку.\nexport const addLike = (cardId, isLiked) => {\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n        method: isLiked ? 'DELETE' : 'PUT',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};  ","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { openModal, closeModal, closeModalOverlay } from './modal.js';\nimport { enableValidation, clearValidation } from './validation.js';\nimport { config, updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, getInitialCards, deleteCard, addLike } from './api.js';\n\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\nconst popupEditProfile = document.querySelector('.popup_type_edit');\nconst buttonAddCard = document.querySelector('.profile__add-button');\nconst popupAddCard = document.querySelector('.popup_type_new-card');\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\nconst avatar = document.querySelector('.profile__image');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst aboutInput = document.querySelector('.popup__input_type_description');\nconst nameTitle = document.querySelector('.profile__title');\nconst jobTitle = document.querySelector('.profile__description');\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\nconst popupImage = document.querySelector('.popup__image');\nconst popupImageOpen = document.querySelector('.popup_type_image');\nconst popupImageDescription = document.querySelector('.popup__caption');\nconst cardList = document.querySelector('.places__list');\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\n\n/**\n * Объект опции:\n * 1. Элемент формы.\n * 2. Элемент поля ввода.\n * 3. Кнопка отправки формы.\n * 4. Класс для отключения кнопки.\n * 5. Класс для выделения попапа цветом.\n * 6. Класс для отображения попапа.\n */\n\nconst configValidation = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Открытие модального окна по нажатию на аватарку. \navatar.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    openModal(popupNewAvatar);\n});\n\n// Открытие модального окна по нажатию на кнопку добавления карточки.\nbuttonAddCard.addEventListener('click', function () {\n    clearValidation(formAddCard, configValidation);\n    openModal(popupAddCard);\n});\n\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\nbuttonEditProfile.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    nameInput.value = nameTitle.textContent;\n    aboutInput.value = jobTitle.textContent;\n    openModal(popupEditProfile);\n});\n\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\ndocument.addEventListener('click', function (evt) {\n    if (evt.target.classList.contains('popup__close')) {\n        const currentModal = evt.target.closest('.popup');\n        closeModal(currentModal);\n    }\n});\n\n// Открытие модального окна с изображением.\nfunction openPopupImage(imageSrc, imageAlt) {\n    popupImage.src = imageSrc;\n    popupImage.alt = imageAlt;\n    popupImageDescription.textContent = imageAlt;\n    openModal(popupImageOpen);\n};\n\n// Закрытие модального окна по оверлею.\ndocument.addEventListener('click', closeModalOverlay);\n\n// Запуск функции поиска всех форм на странице.\nenableValidation(configValidation);\n\n// Обновление фотографии.\nformPhotoProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n    updatePhotoCheck(newAvatarPhoto)\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n    updatePhoto(newAvatarPhoto)\n        .then((data) => {\n            avatar.style.backgroundImage = `url(${data.avatar})`;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\";\n            buttonElement.disabled = false;\n            closeModal(popupNewAvatar);\n        })\n        .catch((error) => {\n            console.log('Ошибка:', error);\n        })\n});\n\n// Редактирование профиля.\nformEditProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    nameTitle.textContent = nameInput.value;\n    jobTitle.textContent = aboutInput.value;\n\n    const buttonElement = formEditProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\"\n    buttonElement.disabled = true;\n\n    updateProfile(nameInput.value, aboutInput.value)\n        .then((data) => {\n            nameTitle.textContent = data.name;\n            jobTitle.textContent = data.about;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            closeModal(popupEditProfile);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\n// Добавление карточки.\nformAddCard.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formAddCard.querySelector('.popup__button');\n    const item = {\n        name: document.querySelector('.popup__input_type_card-name').value,\n        link: document.querySelector('.popup__input_type_url').value,\n    }\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n\n    addCard(item.name, item.link)\n        .then((data) => {\n            const newCard = createCard(data,\n                deleteCard,\n                addLike,\n                data.owner._id,\n                openPopupImage);\n            cardList.prepend(newCard);\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            formAddCard.reset();\n            closeModal(popupAddCard);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\nconst promises = [getUserData(), getInitialCards()];\nPromise.all(promises)\n    .then(([userData, initialCards]) => {\n        document.querySelector('.profile__image').style.backgroundImage = `url(${userData.avatar})`;\n        nameTitle.textContent = userData.name;\n        jobTitle.textContent = userData.about;\n        const userId = userData._id;\n        initialCards.forEach(function (item) {\n            const newCard = createCard(item, deleteCard, addLike, userId, openPopupImage);\n            cardList.append(newCard);\n        })\n    })\n    .catch((error) => {\n        console.log('Ошибка', error);\n    });"],"names":["createCard","card","deleteCard","addLike","userId","openPopupImage","templateCard","document","querySelector","content","cloneNode","likeButton","image","likeCount","textContent","likes","length","name","isLiked","classList","contains","addEventListener","_id","then","data","toggle","catch","error","console","log","owner","remove","link","src","alt","openModal","currentModal","add","closeModalEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","configValidation","errorElement","concat","id","errorClass","inputErrorClass","disableSubmitButton","button","config","disabled","inactiveButtonClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","handleResponse","response","ok","json","Promise","reject","status","cardId","fetch","method","headers","authorization","buttonEditProfile","popupEditProfile","buttonAddCard","popupAddCard","popupNewAvatar","avatar","nameInput","aboutInput","nameTitle","jobTitle","formEditProfile","formAddCard","popupImage","popupImageOpen","popupImageDescription","cardList","formPhotoProfile","newAvatarPhoto","formSelector","imageSrc","imageAlt","value","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","preventDefault","url","get","startsWith","body","JSON","stringify","updatePhoto","style","backgroundImage","finally","nameData","aboutData","about","nameCard","linkCard","item","newCard","prepend","reset","promises","all","_ref","_ref2","userData","initialCards","append"],"sourceRoot":""}