{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// Функция создания карточки.\nexport function createCard(card, deleteCard, addLike, userId, openPopupImage) {\n    const templateList = document.querySelector('#card-template').content;\n    const templateCard = templateList.querySelector('.card').cloneNode(true);\n    const likeButton = templateCard.querySelector('.card__like-button');\n    const image = templateCard.querySelector('.card__image');\n    const likeCount = templateCard.querySelector('.card__count');\n    likeCount.textContent = card.likes ? card.likes.length : 0;\n    templateCard.querySelector('.card__title').textContent = card.name;\n    templateCard.querySelector('.card__like-button').addEventListener('click', () => addLike(likeCount, likeButton, card._id)\n        .then((data) => {\n            likeCount.textContent = data.likes.length;\n            likeButton.classList.toggle('card__like-button_is-active');\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n    );\n\n    // Проверка идентификатора пользователя с остальными пользователями.\n    if (userId !== card.owner._id) {\n        templateCard.querySelector('.card__delete-button').classList.remove('card__delete-button');\n    } else {\n        templateCard.querySelector('.card__delete-button').addEventListener('click', () => deleteCard(templateCard, card._id)\n            .catch((error) => {\n                console.log('Ошибка', error);\n            })\n        )\n    };\n\n    image.addEventListener('click', function () {\n        openPopupImage(card.link, card.name)\n    });\n\n    image.src = card.link;\n    image.alt = card.name;\n    return templateCard;\n};","// Открыть модальное окно.\nexport function openModal(currentModal) {\n    currentModal.classList.add('popup_is-opened');\n    document.addEventListener('keydown', closeModalEscape);\n};\n// Закрыть модальное окно.\nexport function closeModal(currentModal) {\n    currentModal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEscape);\n\n};\n// Закрыть модальное окно по оверлею.\nexport function closeModalOverlay(evt) {\n    const currentModal = document.querySelector('.popup_is-opened');\n    if (evt.target === currentModal) {\n        closeModal(currentModal);\n    }\n};\n// Закрыть модальное окно по Escape.\nexport function closeModalEscape(evt) {\n    if (evt.key === 'Escape') {\n        const currentModal = document.querySelector('.popup_is-opened');\n        if (currentModal) {\n            closeModal(currentModal);\n        }\n    }\n};\n\n","// Проверка валидации.\nexport const isValid = (formElement, inputElement, configValidation) => {\n    if (inputElement.validity.patternMismatch) {\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n    } else {\n        inputElement.setCustomValidity(\"\");\n    }\n    if (!inputElement.validity.valid) {\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\n    } else {\n        hideInputError(formElement, inputElement, configValidation);\n    }\n};\n\n// Функция отображения ошибок валидации.\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(configValidation.errorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(configValidation.inputErrorClass);\n};\n\n// Функция скрытия ошибок валидации.\nexport const hideInputError = (formElement, inputElement, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(configValidation.errorClass);\n    errorElement.textContent = '';\n    errorElement.classList.remove(configValidation.inputErrorClass);\n};\n\n// Функция отключения кнопки.\nconst disableSubmitButton = (button, config) => {\n    button.disabled = true;\n    button.classList.add(config.inactiveButtonClass);\n};\n\n// Функция включения кнопок.\nconst enableSubmitButton = (button, config) => {\n    button.disabled = false;\n    button.classList.remove(config.inactiveButtonClass);\n};\n\n// Проверка на не валидность хотя бы одного поля ввода.\nexport const hasInvalidInput = (inputList) => {\n    return inputList.some((inputElement) => {\n        return !inputElement.validity.valid;\n    })\n};\n\n// Проверка на включение и выключение кнопки.\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\n    if (hasInvalidInput(inputList)) {\n        disableSubmitButton(buttonElement, configValidation);\n    } else {\n        enableSubmitButton(buttonElement, configValidation);\n    }\n};\n\n// Поиск всех полей ввода и кнопки обход всех полей ввода и добавление слушателей.\nexport const setEventListeners = (formElement, configValidation) => {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n    toggleButtonState(inputList, buttonElement, configValidation);\n    inputList.forEach((inputElement) => {\n        inputElement.addEventListener('input', () => {\n            isValid(formElement, inputElement, configValidation);\n            toggleButtonState(inputList, buttonElement, configValidation);\n        });\n    });\n};\n\n// Поиск всех форм на странице и передача их функции слушателю полей.\nexport const enableValidation = (configValidation) => {\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector));\n    formList.forEach((formElement) => {\n        setEventListeners(formElement, configValidation);\n    });\n};\n\n// Функция очистки полей валидации.\nexport function clearValidation(formElement, configValidation) {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n\n    inputList.forEach((inputElement) => {\n        hideInputError(formElement, inputElement, configValidation);\n    });\n\n    disableSubmitButton(buttonElement, configValidation);\n};","// Конфигурация для подставки идентификатора и токена.\nexport const config = {\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-35',\n    headers: {\n        authorization: '08a2006d-1e8e-4054-8f6b-d1d1b6dfc2ea',\n        'Content-Type': 'application/json'\n    }\n};\n\n// Функция для проверки обьекта ответа.\nexport const handleResponse = (response) => {\n    if (response.ok) {\n        return response.json();\n    }\n    return Promise.reject(`Ошибка: ${response.status}`);\n};\n\n// Проверка фотографии для подтверждения.\nexport const updatePhotoCheck = (url) => {\n    return fetch(`${url.value}`, {\n        method: 'HEAD',\n    })\n        .then(response => {\n            if (!response.ok) {\n                console.log('Произошла ошибка');\n            }\n            const contentType = response.headers.get('Content-Type');\n            if (!contentType.startsWith('image/')) {\n                console.log('URL не является картинкой')\n            }\n        })\n};\n\n// Обновление фотографии пользователя на сайте.\nexport const updatePhoto = (newAvatarPhoto) => {\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            avatar: `${newAvatarPhoto.value}`\n        })\n    })\n        .then(handleResponse)\n};\n\n// Редактирование имени и деятельности пользователя в профиле.\nexport const updateProfile = (nameData, aboutData,) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameData,\n            about: aboutData,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Добавление карточки на сайт.\nexport const addCard = (nameCard, linkCard) => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'POST',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameCard,\n            link: linkCard,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Загрузка информации о пользователе с сервера.\nexport const getUserData = (nameTitle, jobTitle) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Загрузка карточек с сервера.\nexport const initialCards = () => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Удаление карточки по нажатию.\nexport const deleteCard = (cardElement, idCard) => {\n    return fetch(`${config.baseUrl}/cards/${idCard}`, {\n        method: 'DELETE',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then((response) => {\n            if (response.ok) {\n                cardElement.remove();\n            }\n        })\n};\n\n// Функция добавления лайка на карточку.\nexport const addLike = (likeCount, likeButton, cardId) => {\n    const isLiked = likeButton.classList.contains('card__like-button_is-active');\n\n    fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n        method: isLiked ? 'DELETE' : 'PUT',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(res => {\n            if (res.ok) {\n                return res.json();\n            }\n        })\n};","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { openModal, closeModal, closeModalOverlay } from './modal.js';\nimport { enableValidation, clearValidation } from './validation.js';\nimport { config, updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, initialCards, deleteCard, addLike } from './api.js';\n\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\nconst popupEditProfile = document.querySelector('.popup_type_edit');\nconst buttonAddCard = document.querySelector('.profile__add-button');\nconst popupAddCard = document.querySelector('.popup_type_new-card');\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\nconst avatar = document.querySelector('.profile__image');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst aboutInput = document.querySelector('.popup__input_type_description');\nconst nameTitle = document.querySelector('.profile__title');\nconst jobTitle = document.querySelector('.profile__description');\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\nconst popupImage = document.querySelector('.popup__image');\nconst popupImageOpen = document.querySelector('.popup_type_image');\nconst popupImageDescription = document.querySelector('.popup__caption');\nconst cardList = document.querySelector('.places__list');\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\n\n/**\n * Объект опции:\n * 1. Элемент формы.\n * 2. Элемент поля ввода.\n * 3. Кнопка отправки формы.\n * 4. Класс для отключения кнопки.\n * 5. Класс для выделения попапа цветом.\n * 6. Класс для отображения попапа.\n */\n\nconst configValidation = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Открытие модального окна по нажатию на аватарку. \navatar.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    openModal(popupNewAvatar);\n});\n\n// Открытие модального окна по нажатию на кнопку добавления карточки.\nbuttonAddCard.addEventListener('click', function () {\n    clearValidation(formAddCard, configValidation);\n    openModal(popupAddCard);\n});\n\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\nbuttonEditProfile.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    nameInput.value = nameTitle.textContent;\n    aboutInput.value = jobTitle.textContent;\n    openModal(popupEditProfile);\n});\n\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\ndocument.addEventListener('click', function (evt) {\n    if (evt.target.classList.contains('popup__close')) {\n        const currentModal = evt.target.closest('.popup');\n        closeModal(currentModal);\n    }\n});\n\n// Открытие модального окна с изображением.\nfunction openPopupImage(imageSrc, imageAlt) {\n    popupImage.src = imageSrc;\n    popupImage.alt = imageAlt;\n    popupImageDescription.textContent = imageAlt;\n    openModal(popupImageOpen);\n};\n\n// Закрытие модального окна по оверлею.\ndocument.addEventListener('click', closeModalOverlay);\n\n// Запуск функции поиска всех форм на странице.\nenableValidation(configValidation);\n\n// Обновление фотографии.\nformPhotoProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n    updatePhotoCheck(newAvatarPhoto)\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n    updatePhoto(newAvatarPhoto)\n        .then((data) => {\n            avatar.style.backgroundImage = `url(${data.avatar})`;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\";\n            buttonElement.disabled = false;\n            closeModal(popupNewAvatar);\n        })\n        .catch((error) => {\n            console.log('Ошибка:', error);\n        })\n});\n\n// Редактирование профиля.\nformEditProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    nameTitle.textContent = nameInput.value;\n    jobTitle.textContent = aboutInput.value;\n\n    const buttonElement = formEditProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\"\n    buttonElement.disabled = true;\n\n    updateProfile(nameInput.value, aboutInput.value)\n        .then((data) => {\n            nameTitle.textContent = data.name;\n            jobTitle.textContent = data.about;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            closeModal(popupEditProfile);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\n// Добавление карточки.\nformAddCard.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formAddCard.querySelector('.popup__button');\n    const item = {\n        name: document.querySelector('.popup__input_type_card-name').value,\n        link: document.querySelector('.popup__input_type_url').value,\n    }\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n\n    addCard(item.name, item.link)\n        .then((data) => {\n            const newCard = createCard(data,\n                deleteCard,\n                addLike,\n                data.owner._id,\n                openPopupImage);\n            cardList.prepend(newCard);\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            formAddCard.reset();\n            closeModal(popupAddCard);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\nconst promises = [getUserData(nameTitle, jobTitle)\n    .then((data) => {\n        document.querySelector('.profile__image').style.backgroundImage = `url(${data.avatar})`;\n        nameTitle.textContent = data.name;\n        jobTitle.textContent = data.about;\n        return data;\n    })\n    .catch((error) => {\n        console.log('Ошибка', error);\n    }),\ninitialCards()\n    .then((data) => {\n        return data;\n    })\n    .catch(() => {\n        console.log('Ошибка', error);\n    })\n];\n\n// Отображение карточек на сайте после получения информации от сервера и токена пользователя.\nPromise.all(promises)\n    .then(([userData, initialCards]) => {\n        const userId = userData._id;\n        initialCards.forEach(function (item) {\n            const newCard = createCard(item,\n                deleteCard,\n                addLike,\n                userId,\n                openPopupImage);\n            cardList.append(newCard);\n        })\n    });"],"names":["createCard","card","deleteCard","addLike","userId","openPopupImage","templateCard","document","querySelector","content","cloneNode","likeButton","image","likeCount","textContent","likes","length","name","addEventListener","_id","then","data","classList","toggle","catch","error","console","log","owner","remove","link","src","alt","openModal","currentModal","add","closeModalEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","configValidation","errorElement","concat","id","errorClass","inputErrorClass","disableSubmitButton","button","config","disabled","inactiveButtonClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","handleResponse","response","ok","json","Promise","reject","status","cardElement","idCard","fetch","method","headers","authorization","cardId","isLiked","contains","res","buttonEditProfile","popupEditProfile","buttonAddCard","popupAddCard","popupNewAvatar","avatar","nameInput","aboutInput","nameTitle","jobTitle","formEditProfile","formAddCard","popupImage","popupImageOpen","popupImageDescription","cardList","formPhotoProfile","newAvatarPhoto","formSelector","imageSrc","imageAlt","value","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","preventDefault","url","get","startsWith","body","JSON","stringify","updatePhoto","style","backgroundImage","finally","nameData","aboutData","about","nameCard","linkCard","item","newCard","prepend","reset","promises","all","_ref","_ref2","userData","initialCards","append"],"sourceRoot":""}