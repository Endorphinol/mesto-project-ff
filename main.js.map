{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// Функция создания карточки.\nexport function createCard(card, deleteCard, addLike, userId, openPopupImage) {\n    const templateList = document.querySelector('#card-template').content;\n    const templateCard = templateList.querySelector('.card').cloneNode(true);\n    const likeButton = templateCard.querySelector('.card__like-button');\n    const image = templateCard.querySelector('.card__image');\n    const likeCount = templateCard.querySelector('.card__count');\n    likeCount.textContent = card.likes ? card.likes.length : 0;\n    templateCard.querySelector('.card__title').textContent = card.name;\n    templateCard.querySelector('.card__like-button').addEventListener('click', () => addLike(likeCount, likeButton, card._id));\n\n    // Проверка идентификатора пользователя с остальными пользователями.\n    if (userId !== card.owner._id) {\n        templateCard.querySelector('.card__delete-button').classList.remove('card__delete-button');\n    } else {\n        templateCard.querySelector('.card__delete-button').addEventListener('click', () => deleteCard(templateCard, card._id));\n    };\n\n    image.addEventListener('click', function () {\n        openPopupImage(card.link, card.name)\n    });\n\n    image.src = card.link;\n    image.alt = card.name;\n    return templateCard;\n};","// Открыть модальное окно.\nexport function openModal(currentModal) {\n    currentModal.classList.add('popup_is-opened');\n    document.addEventListener('keydown', closeModalEscape);\n};\n// Закрыть модальное окно.\nexport function closeModal(currentModal) {\n    currentModal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEscape);\n\n};\n// Закрыть модальное окно по оверлею.\nexport function closeModalOverlay(evt) {\n    const currentModal = document.querySelector('.popup_is-opened');\n    if (evt.target === currentModal) {\n        closeModal(currentModal);\n    }\n};\n// Закрыть модальное окно по Escape.\nexport function closeModalEscape(evt) {\n    if (evt.key === 'Escape') {\n        const currentModal = document.querySelector('.popup_is-opened');\n        if (currentModal) {\n            closeModal(currentModal);\n        }\n    }\n};\n\n","// Проверка валидации.\nexport const isValid = (formElement, inputElement, configValidation) => {\n    if (inputElement.validity.patternMismatch) {\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n    } else {\n        inputElement.setCustomValidity(\"\");\n    }\n    if (!inputElement.validity.valid) {\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\n    } else {\n        hideInputError(formElement, inputElement, configValidation);\n    }\n};\n\n// Функция отображения ошибок валидации.\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(configValidation.errorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(configValidation.inputErrorClass);\n};\n\n// Функция скрытия ошибок валидации.\nexport const hideInputError = (formElement, inputElement, configValidation) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(configValidation.errorClass);\n    errorElement.textContent = '';\n    errorElement.classList.remove(configValidation.inputErrorClass);\n};\n\n// Функция отключения кнопки.\nconst disableSubmitButton = (button, config) => {\n    button.disabled = true;\n    button.classList.add(config.inactiveButtonClass);\n};\n\n// Функция включения кнопок.\nconst enableSubmitButton = (button, config) => {\n    button.disabled = false;\n    button.classList.remove(config.inactiveButtonClass);\n};\n\n// Проверка на не валидность хотя бы одного поля ввода.\nexport const hasInvalidInput = (inputList) => {\n    return inputList.some((inputElement) => {\n        return !inputElement.validity.valid;\n    })\n};\n\n// Проверка на включение и выключение кнопки.\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\n    if (hasInvalidInput(inputList)) {\n        disableSubmitButton(buttonElement, configValidation);\n    } else {\n        enableSubmitButton(buttonElement, configValidation);\n    }\n};\n\n// Поиск всех полей ввода и кнопки обход всех полей ввода и добавление слушателей.\nexport const setEventListeners = (formElement, configValidation) => {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n    toggleButtonState(inputList, buttonElement, configValidation);\n    inputList.forEach((inputElement) => {\n        inputElement.addEventListener('input', () => {\n            isValid(formElement, inputElement, configValidation);\n            toggleButtonState(inputList, buttonElement, configValidation);\n        });\n    });\n};\n\n// Поиск всех форм на странице и передача их функции слушателю полей.\nexport const enableValidation = (configValidation) => {\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector));\n    formList.forEach((formElement) => {\n        setEventListeners(formElement, configValidation);\n    });\n};\n\n// Функция очистки полей валидации.\nexport function clearValidation(formElement, configValidation) {\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\n\n    inputList.forEach((inputElement) => {\n        hideInputError(formElement, inputElement, configValidation);\n    });\n\n    disableSubmitButton(buttonElement, configValidation);\n};","// Конфигурация для подставки идентификатора и токена.\nexport const config = {\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-35',\n    headers: {\n        authorization: '08a2006d-1e8e-4054-8f6b-d1d1b6dfc2ea',\n        'Content-Type': 'application/json'\n    }\n};\n\n// Функция для проверки обьекта ответа.\nexport const handleResponse = (response) => {\n    if (response.ok) {\n        return response.json();\n    }\n    return Promise.reject(`Ошибка: ${response.status}`);\n};\n\n// Проверка фотографии для подтверждения.\nexport const updatePhotoCheck = (url) => {\n    return fetch(`${url.value}`, {\n        method: 'HEAD',\n    })\n        .then(response => {\n            if (!response.ok) {\n                console.log('Произошла ошибка');\n            }\n            const contentType = response.headers.get('Content-Type');\n            if (!contentType.startsWith('image/')) {\n                console.log('URL не является картинкой')\n            }\n        })\n};\n\n// Обновление фотографии пользователя на сайте.\nexport const updatePhoto = (newAvatarPhoto) => {\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            avatar: `${newAvatarPhoto.value}`\n        })\n    })\n        .then(handleResponse)\n};\n\n// Редактирование имени и деятельности пользователя в профиле.\nexport const updateProfile = (nameData, aboutData,) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameData,\n            about: aboutData,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Добавление карточки на сайт.\nexport const addCard = (nameCard, linkCard) => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'POST',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: nameCard,\n            link: linkCard,\n        })\n    })\n        .then(handleResponse)\n};\n\n// Загрузка информации о пользователе с сервера.\nexport const getUserData = (nameTitle, jobTitle) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Загрузка карточек с сервера.\nexport const initialCards = () => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'GET',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(handleResponse)\n};\n\n// Удаление карточки по нажатию.\nexport const deleteCard = (cardElement, idCard) => {\n    return fetch(`${config.baseUrl}/cards/${idCard}`, {\n        method: 'DELETE',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then((response) => {\n            if (response.ok) {\n                cardElement.remove();\n            }\n        })\n};\n\n// Функция добавления лайка на карточку.\nexport const addLike = (likeCount, likeButton, cardId) => {\n    const isLiked = likeButton.classList.contains('card__like-button_is-active');\n\n    fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n        method: isLiked ? 'DELETE' : 'PUT',\n        headers: {\n            authorization: `${config.headers.authorization}`,\n        }\n    })\n        .then(res => {\n            if (res.ok) {\n                return res.json();\n            }\n        })\n};","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { openModal, closeModal, closeModalOverlay } from './modal.js';\nimport { enableValidation, clearValidation } from './validation.js';\nimport { config, updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, initialCards, deleteCard, addLike } from './api.js';\n\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\nconst popupEditProfile = document.querySelector('.popup_type_edit');\nconst buttonAddCard = document.querySelector('.profile__add-button');\nconst popupAddCard = document.querySelector('.popup_type_new-card');\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\nconst avatar = document.querySelector('.profile__image');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst aboutInput = document.querySelector('.popup__input_type_description');\nconst nameTitle = document.querySelector('.profile__title');\nconst jobTitle = document.querySelector('.profile__description');\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\nconst popupImage = document.querySelector('.popup__image');\nconst popupImageOpen = document.querySelector('.popup_type_image');\nconst popupImageDescription = document.querySelector('.popup__caption');\nconst cardList = document.querySelector('.places__list');\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\n\n/**\n * Объект опции:\n * 1. Элемент формы.\n * 2. Элемент поля ввода.\n * 3. Кнопка отправки формы.\n * 4. Класс для отключения кнопки.\n * 5. Класс для выделения попапа цветом.\n * 6. Класс для отображения попапа.\n */\n\nconst configValidation = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Открытие модального окна по нажатию на аватарку. \navatar.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    openModal(popupNewAvatar);\n});\n\n// Открытие модального окна по нажатию на кнопку добавления карточки.\nbuttonAddCard.addEventListener('click', function () {\n    clearValidation(formAddCard, configValidation);\n    openModal(popupAddCard);\n});\n\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\nbuttonEditProfile.addEventListener('click', function () {\n    clearValidation(formEditProfile, configValidation);\n    nameInput.value = nameTitle.textContent;\n    aboutInput.value = jobTitle.textContent;\n    openModal(popupEditProfile);\n});\n\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\ndocument.addEventListener('click', function (evt) {\n    if (evt.target.classList.contains('popup__close')) {\n        const currentModal = evt.target.closest('.popup');\n        closeModal(currentModal);\n    }\n});\n\n// Открытие модального окна с изображением.\nfunction openPopupImage(imageSrc, imageAlt) {\n    popupImage.src = imageSrc;\n    popupImage.alt = imageAlt;\n    popupImageDescription.textContent = imageAlt;\n    openModal(popupImageOpen);\n};\n\n// Закрытие модального окна по оверлею.\ndocument.addEventListener('click', closeModalOverlay);\n\n// Запуск функции поиска всех форм на странице.\nenableValidation(configValidation);\n\n// Обновление фотографии.\nformPhotoProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n    updatePhotoCheck(newAvatarPhoto)\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n    updatePhoto(newAvatarPhoto)\n        .then((data) => {\n            avatar.style.backgroundImage = `url(${data.avatar})`;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\";\n            buttonElement.disabled = false;\n            closeModal(popupNewAvatar);\n        })\n        .catch((error) => {\n            console.log('Ошибка:', error);\n        })\n});\n\n// Редактирование профиля.\nformEditProfile.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    nameTitle.textContent = nameInput.value;\n    jobTitle.textContent = aboutInput.value;\n\n    const buttonElement = formEditProfile.querySelector('.popup__button');\n    buttonElement.textContent = \"Сохранение...\"\n    buttonElement.disabled = true;\n\n    updateProfile(nameInput.value, aboutInput.value)\n        .then((data) => {\n            nameTitle.textContent = data.name;\n            jobTitle.textContent = data.about;\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            closeModal(popupEditProfile);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\n// Добавление карточки.\nformAddCard.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n\n    const buttonElement = formAddCard.querySelector('.popup__button');\n    const item = {\n        name: document.querySelector('.popup__input_type_card-name').value,\n        link: document.querySelector('.popup__input_type_url').value,\n    }\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n\n    addCard(item.name, item.link)\n        .then((data) => {\n            const newCard = createCard(data,\n                 deleteCard\n                 .catch((error) => {\n                    console.log('Ошибка', error);\n                }),\n                  addLike\n                  .then((data) => {\n                    likeCount.textContent = data.likes.length;\n                    likeButton.classList.toggle('card__like-button_is-active');\n                })\n                .catch((error) => {\n                    console.log('Ошибка', error);\n                }),\n                  data.owner._id, \n                  openPopupImage);\n            cardList.prepend(newCard);\n        })\n        .finally(() => {\n            buttonElement.textContent = \"Сохранить\"\n            buttonElement.disabled = false;\n            formAddCard.reset();\n            closeModal(popupAddCard);\n        })\n        .catch((error) => {\n            console.log('Ошибка', error);\n        })\n});\n\nconst promises = [getUserData(nameTitle, jobTitle)\n    .then((data) => {\n        document.querySelector('.profile__image').style.backgroundImage = `url(${data.avatar})`;\n        nameTitle.textContent = data.name;\n        jobTitle.textContent = data.about;\n        return data;\n    })\n    .catch((error) => {\n        console.log('Ошибка', error);\n    }),\ninitialCards()\n    .then((data) => {\n        return data;\n    })\n    .catch(() => {\n        console.log('Ошибка', error);\n    })\n];\n\n// Отображение карточек на сайте после получения информации от сервера и токена пользователя.\nPromise.all(promises)\n    .then(([userData, initialCards]) => {\n        const userId = userData._id;\n        initialCards.forEach(function (item) {\n            const newCard = createCard(item, \n                deleteCard\n                .catch((error) => {\n                    console.log('Ошибка', error);\n                }),\n                addLike\n                .then((data) => {\n                    likeCount.textContent = data.likes.length;\n                    likeButton.classList.toggle('card__like-button_is-active');\n                })\n                .catch((error) => {\n                    console.log('Ошибка', error);\n                }),\n                userId, \n                openPopupImage);\n            cardList.append(newCard);\n        })\n    });"],"names":["createCard","card","deleteCard","addLike","userId","openPopupImage","templateCard","document","querySelector","content","cloneNode","likeButton","image","likeCount","textContent","likes","length","name","addEventListener","_id","owner","classList","remove","link","src","alt","openModal","currentModal","add","closeModalEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","configValidation","errorElement","concat","id","errorClass","inputErrorClass","disableSubmitButton","button","config","disabled","inactiveButtonClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","handleResponse","response","ok","json","Promise","reject","status","cardElement","idCard","fetch","method","headers","authorization","then","cardId","isLiked","contains","res","buttonEditProfile","popupEditProfile","buttonAddCard","popupAddCard","popupNewAvatar","avatar","nameInput","aboutInput","nameTitle","jobTitle","formEditProfile","formAddCard","popupImage","popupImageOpen","popupImageDescription","cardList","formPhotoProfile","newAvatarPhoto","formSelector","imageSrc","imageAlt","value","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","preventDefault","url","console","log","get","startsWith","catch","error","body","JSON","stringify","updatePhoto","data","style","backgroundImage","finally","nameData","aboutData","about","nameCard","linkCard","item","newCard","toggle","prepend","reset","promises","all","_ref","_ref2","userData","initialCards","append"],"sourceRoot":""}